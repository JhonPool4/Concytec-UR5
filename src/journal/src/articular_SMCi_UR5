#!/usr/bin/env python

# ============================================================
#	Curso   :   Concytec - UTEC
# 	Alumno  :   Jhon Charaja
# 	Info	:	articular PD controller for UR5 robot
# ============================================================

# ============================
# 			Libraries
# ============================ 
import rospy 							# ROS with Python
import os 								# Manipulate path names
import pandas as pd 					# Save data
from sensor_msgs.msg import JointState 	# To send angular position to robot
from markers import *					# To show a market ball 
from functions import *					# Forward Kinematics, Inverse Kinematics and Forward Dynamic
from roslib import packages				# Library with ROS packages
import rbdl								# Library to compute dynamic matrix H and B of robot
pi = np.pi 								# Define "pi"
from datetime import datetime



# ===============================
# 		Configuration of node
# ===============================
# Create a nodo: SMC_controller
rospy.init_node("SMCi_controller_ur5")
cwd = os.path.dirname(os.path.realpath(__file__))


# Public in topic /joint_states	to send joint data		
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

# ===============================
# 		Line and Ball Marker
# ===============================
# Show a ball marker for current and desired position of robot' end-effector
bmarker_des 	= BallMarker(color['RED'])
bmarker_act  	= BallMarker(color['YELLOW'])

# =============================================================
# 					Robot Dynamics
# =============================================================
modelo = rbdl.loadModel(os.path.join(cwd,'../../ur5_description/urdf/ur5_joint_limited_robot.urdf'))
ndof   = modelo.q_size     # Degrees of Freedom

# Generar objeto/espacio del vector b y M
b = np.zeros(ndof)
M = np.zeros((ndof,ndof))
# =============================================================
# 				Set home joint configuration of UR5
# =============================================================
#  Home joint configuration of ur5 robot (radians)
q 		    = np.array([0.22555947, -2.16092376, -2.13975583, -0.41997402,  1.53827725, -1.35006513]) # Center [0.5 +0.0 0.0]
dq 			= np.zeros(ndof)
ddq 		= np.zeros(ndof)
dq_des_m1   = np.zeros(ndof)
ddq_des_m1  = np.zeros(ndof)

# Desired angular position, velocity and acceleration
q_des 	= copy(q) 
dq_des = np.zeros(6)
ddq_des = np.zeros(6) 

# Desired cartesian position and velocity
x_des 	 = np.array([0.0,   0.0,  0.0, 0.01676998,  0.99985616,  0.00251062,  0.00 ]) # fixed orientation
dx_des 	 = np.zeros(7)
ddx_des  = np.zeros(7)
dddx_des = np.zeros(7)

# Measured angular position, velocity and acceleration
x_act 	 = np.zeros(7)
dx_act 	 = np.zeros(7)
ddx_act  = np.zeros(7)
dddx_act = np.zeros(7)

# Past velocity and acceleration
dx_act_p  = np.zeros(7)
ddx_act_p = np.zeros(7)

# Error angular position, velocity and acceleration
x_e    = np.zeros(7)
dx_e   = np.zeros(7)
ddx_e  = np.zeros(7)
dddx_e = np.zeros(7)

# Joints name of UR5 robot
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint','wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

# Object(messague) type JointState
jstate = JointState()

# Loop rate (in Hz)
rate 	= rospy.Rate(100)		# 100 [Hz]
dt 		= 1e-2					# 10  [ms]

# Create a object Robot with dynamics of UR5 robot (code in Functiones)
UR5_robot = Robot(q, dq, ndof, dt)

# ================================
# 			SMC controller
# ================================
#alpha = 0.5*dt
#gamma = 0.9
alpha = 10*dt
gamma = 1.0
Lambda = 0.5*np.array([1, 1, 1, 1, 1, 1])#np.eye(ndof)

dJ_Lambda = np.zeros(ndof)

s  = np.zeros(6)
ds = np.zeros(6)
u  = np.zeros(6)

# ================================
# 		Dynamic simulation
# ================================
t = 0.0

origin 	= './Data/SMCi'
suffix 	= 'circular_traj'
folder = os.path.join(cwd, origin, suffix)

column_names = [
	'x', 'y', 'z', 'w', 'ex', 'ey', 'ez',
	'dx', 'dy', 'dz', 'dw', 'dex', 'dey', 'dez',	
	'ddx', 'ddy', 'ddz', 'ddw', 'ddex', 'ddey', 'ddez',
	'dddx', 'dddy', 'dddz', 'dddw', 'dddex', 'dddey', 'dddez',
	'x_des', 'y_des', 'z_des', 'w_des', 'ex_des', 'ey_des', 'ez_des',
	'dx_des', 'dy_des', 'dz_des', 'dw_des', 'dex_des', 'dey_des', 'dez_des',
	'ddx_des', 'ddy_des', 'ddz_des', 'ddw_des', 'ddex_des', 'ddey_des', 'ddez_des',
	'dddx_des', 'dddy_des', 'dddz_des', 'dddw_des', 'dddex_des', 'dddey_des', 'dddez_des',
	'e_x', 'e_y', 'e_z', 'e_w', 'e_ex', 'e_ey', 'e_ez',
	'de_x', 'de_y', 'de_z', 'de_w', 'de_ex', 'de_ey', 'de_ez',
	'dde_x', 'dde_y', 'dde_z', 'dde_w', 'dde_ex', 'dde_ey', 'dde_ez',
	'ddde_x', 'ddde_y', 'ddde_z', 'ddde_w', 'ddde_ex', 'ddde_ey', 'ddde_ez',
	'lambda1', 'lambda2', 'lambda3', 'lambda4', 'lambda5', 'lambda6',
	'dlambda1', 'dlambda2', 'dlambda3', 'dlambda4', 'dlambda5', 'dlambda6',
	'dJ_lambda1', 'dJ_lambda2', 'dJ_lambda3', 'dJ_lambda4', 'dJ_lambda5', 'dJ_lambda6',
	'u1', 'u2', 'u3', 'u4', 'u5', 'u6',
	's1', 's2', 's3', 's4', 's5', 's6',
	'ds1', 'ds2', 'ds3', 'ds4', 'ds5', 'ds6',	
	'J1', 'J2', 'J3', 'J4', 'J5', 'J6'
	]

df = pd.DataFrame(columns=column_names)

# Filename
now = datetime.now()
now = now.strftime("%d%m%Y_%H-%M-%S")
#fn = now
fn = "articular_"+"lambda_"+str(Lambda[0])+"_alpha_"+str(alpha)+"_gamma_"+str(gamma)+"v2.csv"

# Creates folder if it does not exist

if not os.path.exists(folder):
	os.makedirs(folder)

path = os.path.join(folder, fn)
df.to_csv(path, index=False)

while not rospy.is_shutdown():
	# desired values (cartesian space)
	x_des[0:3], dx_des[0:3], ddx_des[0:3], dddx_des[0:3] = circular_trayectory_generator(t)
	
	# Inverse kinematics
	q_des, dq_des, ddq_des, dddq_des = ikine_pose_ur5(x_des, dx_des, q_des, dq_des, ddq_des)	# It starts with qdes=copy(q0)

	# Error calculation
	e 	=  q_des - q
	de 	=  dq_des - dq
	dde =  ddq_des - ddq

	# Calcular b y M
	rbdl.NonlinearEffects(modelo, q, dq, b)
	rbdl.CompositeRigidBodyAlgorithm(modelo, q, M)

	# SMC articular + Feedback linearization
	b_est = u - np.dot(M, ddq)
	u = M.dot(ddq_des +  s + np.tanh(s)) + b_est
	
	# Send control signal
	u 		= saturador_effort_control_UR5(u)
	UR5_robot.send_command(u)

	# Read position, velocity, and acceleration angular of UR5 joints
	q  		= UR5_robot.read_joint_positions()
	dq 		= UR5_robot.read_joint_velocities()
	ddq 	= UR5_robot.read_joint_accelerations()

	# Publish message
	jstate.header.stamp = rospy.Time.now()
	jstate.name 		= jnames			# Joints position name
	jstate.position 	= q
	jstate.velocity 	= dq
	pub.publish(jstate)


	# Current position and velocity of UR5 end-effector
	x_act[0:7]  = get_current_pose(q)
	dx_act[0:7] = get_current_dpose(q, dq)	

	# Estimation of current acceleration and jerk of UR5 end-effector 
	ddx_act     = (dx_act - dx_act_p)/dt 
	dddx_act    = (ddx_act - ddx_act_p)/dt
	# Past values
	dx_act_p 	= copy(dx_act) 
	ddx_act_p   = copy(ddx_act)

	# Error in position, velocity and acceleration 
	x_e[0:7]   = compute_error_pose(x_des, x_act)
	dx_e[0:7]  = compute_error_dpose(dx_des, dx_act)
	ddx_e[0:7] = compute_error_ddpose(ddx_des, ddx_act)
	dddx_e[0:7]= compute_error_dddpose(dddx_des, dddx_act)


	# Derivative of Kp and Kd
	dLambda = -(alpha/dt) * (dJ_Lambda)
	
	# s and ds
	s  = np.multiply(np.multiply(Lambda, Lambda), e) + 2*np.multiply(Lambda, de)
	ds = 2*np.multiply(np.multiply(Lambda, dLambda), e) + np.multiply(np.multiply(Lambda, Lambda), de) + 2*np.multiply(dLambda, de) + 2*np.multiply(Lambda, dde)	
	
	#cost function
	c = gamma *0.5*np.multiply(s,s) + (1-gamma)*0.5*np.multiply(ds,ds)
	
	# Gradient descent
	dJ_s    = gamma * s    						# [6x1]
	ds_q    = -np.multiply(Lambda, Lambda)		# [6x1]

	dJ_ds   = (1-gamma)*ds 						# [6x1]
	dds_q   =  -2*np.multiply(Lambda, dLambda) 	# [6x1]

	first  =  np.multiply(2-np.multiply(np.tanh(s),np.tanh(s)), np.multiply(Lambda, e) + de ) # [6x1]
	du_Lambda = 2*np.dot(M, first) 				# [6x1]

	dJ_Lambda1 = np.multiply(np.multiply(dJ_s,   ds_q), du_Lambda) 
	dJ_Lambda2 = np.multiply(np.multiply(dJ_ds, dds_q), du_Lambda)
	dJ_Lambda =  dJ_Lambda1 + dJ_Lambda2


	# New value of Lambda
	Lambda = Lambda - alpha*dJ_Lambda
	
	t = t + dt

	# Ball marker
	bmarker_des.xyz(x_des[0:3])	# Red
	bmarker_act.xyz(x_act[0:3])	# Yellow
	
	# Print
	print("t: ", t)
	print("Lambda: ", Lambda) 
	print("c:  ", c)
	print("e   (mm): ", np.round(1000*x_e[0:3], 1))
	print("de  (mm): ", np.round(1000*dx_e[0:3],1))
	print("dde (mm): ", np.round(1000*ddx_e[0:3],1))
	print("ddde(mm): ", np.round(1000*dddx_e[0:3],1))	
	print("\n")

	# Append data
	#row = tl(x_e)+tl(dx_e)+tl(ddx_e)+tl(dddx_e)+tl(Lambda)
	row = tl(x_act)+tl(dx_act)+tl(ddx_act)+tl(dddx_act)+tl(x_des)+tl(dx_des)+tl(ddx_des)+tl(dddx_des)+tl(x_e)+tl(dx_e)+tl(ddx_e)+tl(dddx_e)+tl(Lambda)+tl(dLambda)+tl(dJ_Lambda)+tl(u)+tl(s)+tl(ds)+tl(c)
	row = tl(np.expand_dims(np.array(row), axis = 1))

	# Fix for redimensionality
	df_row = pd.DataFrame.from_dict(dict(zip(column_names, row)))

	df.append(df_row, sort = False).to_csv(path, index=False, mode = 'a', header=False)

	if t>=(60):
		print("Reached maximum of steps")
		break

	# Wait for the next iteration
	rate.sleep()

print('out because ctrl + c. Data saved.')



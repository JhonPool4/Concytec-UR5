#!/usr/bin/env python

# ============================================================
# This algorithm control position and oritation of UR5 robot
# along a desired trajectory using Sliding Mode Control (SMD).
# ============================================================

# ============================
# 			Libraries
# ============================ 
import rospy 							# ROS with Python
from sensor_msgs.msg import JointState 	# To send angular position to robot
from markers import *					# To show a market ball 
from functions import *					# Forward Kinematics, Inverse Kinematics and Forward Dynamic
from roslib import packages				# Library with ROS packages
import rbdl								# Library to compute dynamic matrix H and B of robot
pi = np.pi 								# Define "pi"

# ===============================
# 		Configuration of node
# ===============================
# Create a nodo: control_SMD
rospy.init_node("UR5_pose_trajectory_tracking_SMD")

# Public in topic /joint_states	to send joint data		
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

# Show a ball marker for current and desired position of robot' end-effector
bmarker_actual  = BallMarker(color['WHITE'])
bmarker_deseado = BallMarker(color['YELLOW'])

# =============================================================
# 				Set home joint configuration of UR5
# =============================================================
#  Home joint configuration of ur5 robot (radians)
#q_home 		= np.array([-0.05604054333684379, -3.395932348045453, 1.6093477768505586, 2.4695462881879098, -2.2838842478964296, -1.8703163789178847])
q_home 		= np.array([1.56, -1.32, 1.56, -1.79, -1.59, 0.0])
#q_home		= np.array([ 1.55775283e+00,  -1.44905414e+00,   1.82349994e+00,
#						-1.92482263e+00,  -1.59003319e+00,  -1.59858511e-03])
dq 			= np.zeros(6)
ddq 		= np.zeros(6)

# Joints name of UR5 robot
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint','wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

# Object(messague) type JointState
jstate = JointState()

# Messague
jstate.header.stamp = rospy.Time.now() 	# Current time
jstate.name 		= jnames			# joints name
jstate.position 	= q_home			# set joint home configuration

# Send joints position
pub.publish(jstate)

# =============================================================
# 					Robot Dynamics
# =============================================================
# Modelo RBDL
modelo = rbdl.loadModel('/home/utec/ros_ws/src/concytec_ur5/urdf/ur5_joint_limited_robot.urdf')
#modelo = rbdl.loadModel('/home/utec/ros_ws/src/ur5/ur5_description/urdf/ur5_joint_limited_robot.urdf')
ndof   = modelo.q_size     # Degrees of Freedom

# Communication frecuency (Hz)
freq 	= 1000
dt 		= 1e-3				# Send joint configuration each 10 ms
rate 	= rospy.Rate(freq)

# Numpy arrays
M_hat = np.zeros([ndof, ndof])  # Best estimation of H matrix
b_hat = np.zeros(ndof)
zeros = np.zeros(ndof)			# Zeros vector
s     = np.zeros(ndof)			# "s" vector

# Create a object Robot with dynamics of UR5 robot (code in Functiones)
UR5_robot = Robot(q_home, dq, ndof, dt)
# Read position and velocity angular of UR5 joints
q  		= UR5_robot.read_joint_positions()
dq 		= UR5_robot.read_joint_velocities()
# =============================================================
# 					SMD Parameters
# =============================================================
Lambda  = 40*np.identity(6)
n 		= 0.1*np.ones(6)
Fi 		= 0.1/Lambda[0,0]
alpha 	= 0.05 				# percentage of uncertainty	

# =============================================================
# 				Simulation UR5 with SMD
# =============================================================

# Set the initial value
qdes	= copy(q_home)
q 		= copy(q_home)

# Inicialize time
t 	= 0.0

path 		= 	"/home/utec/ros_ws/src/tesis_jhon/src/Data_SMC/" 
ftime 		= 	open(path + "time.txt", "w")
fxdes 		= 	open(path + "xdes.txt", "w")
fdxdes 		= 	open(path + "dxdes.txt", "w")
fqdes 		= 	open(path + "qdes.txt", "w")
fdqdes 		= 	open(path + "dqdes.txt", "w")
fddqdes 	= 	open(path + "ddqdes.txt", "w")
fxmed		= 	open(path + "xmed.txt", "w")
fq 	 		= 	open(path + "q.txt", "w")
fdq 		= 	open(path + "dq.txt", "w")
fddq 	 	= 	open(path + "ddq.txt", "w")
fu 			= 	open(path + "u.txt", "w")
fQerror 	= 	open(path + "Q_error.txt", "w")

# Start simuation
while not rospy.is_shutdown():

	# ========================================
	# Desired trajectory on Operational Space
	# ========================================

	# Operational Space: desired position, velocity and acceleration
	xdes 	= np.array([0.10131071, -0.5 - 0.1*dt*t,  0.28344923,  0.0095449 , -0.00529776,
						-0.99988582, -0.01044917])
	dxdes	= np.array([0.0, -0.1*dt, 0.0, 0.0, 0.0, 0.0, 0.0])
	ddxdes 	= np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

	# ========================================
	# Desired trajectory on Joint Space
	# ========================================

	qdes, dqdes, ddqdes		= ikine_pose_ur5(xdes, dxdes, ddxdes, qdes)


	M_hat 	= UR5_robot.get_M()
	b_hat 	= UR5_robot.get_b()
	dM_hat  = (M_hat)/dt

	# ============================
	#		Control Law
	# ============================
	e 		= q 		- 	qdes 				# Position error
	de 		= dq 		- 	dqdes 			    # Velocity error
	s 		= de 		+ 	np.dot(Lambda,e) 	# "s"
	qr 		= dqdes  	- 	np.dot(Lambda,e)
	dqr 	= ddqdes 	- 	np.dot(Lambda,de)

	K 		= n + abs( alpha*np.dot(M_hat, dqr) + alpha*(b_hat) + (1-alpha)*np.dot(dM_hat,qr))
	u 		= (b_hat) + np.dot(M_hat,ddqdes) - np.dot(M_hat, np.dot(Lambda,de)) - K*saturador(s/Fi)	# Effort control
	u 		= saturador_effort_control_UR5(u)
	# Send control signal
	UR5_robot.send_command(u)
	# Read position and velocity angular of UR5 joints
	q  		= UR5_robot.read_joint_positions()
	dq 		= UR5_robot.read_joint_velocities()
	ddq 	= UR5_robot.read_joint_acceleration()

	# Publish message
	jstate.header.stamp = rospy.Time.now()
	jstate.position 	= q
	jstate.velocity 	= dq
	pub.publish(jstate)

	# Current Position of UR5 end-effector
	T_measured	= fkine_ur5(q)
	x_measured  = T_measured[0:3,3]
	Q_measured  = rot2quat(T_measured[0:3, 0:3])

	Q_error 	= quatError(xdes[3:7], Q_measured)

	bmarker_deseado.xyz(xdes[0:3])	# Yellow
	bmarker_actual.xyz(x_measured)	# White

	print("time: ", t)
	print("time2: ", t*dt)
	print("y: ", x_measured[1])
	#print("u: ", u[0])
	#print("q: ", q)
	#print("dq: ", dq)
	print("e_pos: ", np.linalg.norm(e[0:3]))
	print("e_ori: ", np.linalg.norm(e[3:7]))
	print("----------------------")


	ftime.write(str(t)+'\n')

	fxdes.write(str(xdes[0]) + ', ' + str(xdes[1]) + ', ' + str(xdes[2]) + ', ' + str(xdes[3]) + ', ' +
				str(xdes[4]) + ', ' + str(xdes[5]) + ', ' + str(xdes[6]) + '\n')
	
	fdxdes.write(str(dxdes[0]) + ', ' + str(dxdes[1]) + ', ' + str(dxdes[2]) + ', ' + str(dxdes[3]) + ', ' +
				 str(dxdes[4]) + ', ' + str(dxdes[5]) + ', ' + str(dxdes[6]) + '\n')
	
	fqdes.write(str(qdes[0]) + ', ' + str(qdes[1]) + ', ' + str(qdes[2]) + ', ' + str(qdes[3]) + ', ' +
				str(qdes[4]) + ', ' + str(qdes[5]) + '\n')
	
	fdqdes.write(str(dqdes[0]) + ', ' + str(dqdes[1]) + ', ' + str(dqdes[2]) + ', ' + str(dqdes[3]) + ', ' +
				 str(dqdes[4]) + ', ' + str(dqdes[5]) + '\n')
	
	fddqdes.write(str(ddqdes[0]) + ', ' + str(ddqdes[1]) + ', ' + str(ddqdes[2]) + ', ' + str(ddqdes[3]) + ', ' +
				  str(ddqdes[4]) + ', ' + str(ddqdes[5]) + '\n')

	fxmed.write(str(x_measured[0]) + ', ' + str(x_measured[1]) + ', ' + str(x_measured[2]) + ', ' +
				str(Q_measured[0]) + ', ' + str(Q_measured[1]) + ', ' + str(Q_measured[2]) + ', ' + 
				str(Q_measured[3]) + '\n' )

	fq.write(str(q[0]) + ', ' + str(q[1]) + ', ' + str(q[2]) + ', ' + str(q[3]) + ', ' +
			 str(q[4]) + ', ' + str(q[5]) + '\n')
	
	fdq.write(str(dq[0]) + ', ' + str(dq[1]) + ', ' + str(dq[2]) + ', ' + str(dq[3]) + ', ' +
			  str(dq[4]) + ', ' + str(dq[5]) + '\n')
	
	fddq.write(str(ddq[0]) + ', ' + str(ddq[1]) + ', ' + str(ddq[2]) + ', ' + str(ddq[3]) + ', ' +
			   str(ddq[4]) + ', ' + str(ddq[5]) + '\n')

	fu.write(str(u[0]) + ', ' + str(u[1]) + ', ' + str(u[2]) + ', ' + str(u[3]) + ', ' + str(u[4]) + ', ' +
			 str(u[5]) + '\n')

	fQerror.write(str(Q_error[0]) + ', ' + str(Q_error[1]) + ', ' + str(Q_error[2]) + ', ' +
				  str(Q_error[3]) + '\n')
	t = t+1
	if t > 1000:
		break
	# Esperar hasta la siguiente  iteracion
	rate.sleep()

ftime.close()
fxdes.close()  
fdxdes.close()
fqdes.close()
fdqdes.close()
fddqdes.close()
fxmed.close()
fq.close()
fdq.close()
fddq.close()
fu.close()
fQerror.close()
